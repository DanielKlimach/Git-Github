-git config --global user.name "nome que quiser" (configura o nome do usuario do git)
-git config --global user.email "email que quiser" (configura o email do usuario do git)
-git config user.email (mostra o email que está sendo utilizado)
-git config user.name (mostra o nome que está sendo utilizado)

-git config core.editor (mostra o caminho que o git está vinculado, em algum programa, caso não tenha faça digite:)
-git config core. editor "diretório do programa desejado" (vincula um programa com o git, no meu caso é o Visual Studio Code)
Além disso você precisa:

-Clicar com o botão direito no programa que você vinculou no git [ex:Visual Studio Code], depois
ir em propriedades, em Destino, copie seu diretório, depois vá no painel de controle > sistema e seguraça > sistema >
configurações avançadas do sistema > variáveis de ambiente > novo... > nome da variável: nome que quiser [ex:code]
valor da variável: cole o diretório copiado > dê ok em tudo

-Agora se escrever o nome da variável que colocou [ex: code] o git abrirá automaticamente 
o programa vinculado[ex: Visual Studio Code´]

-pwd (mostra o diretório que aquele documento git está vinculado)
-ls (mostra uma lista de todos os aqueivos e pastas daquele diretório)
-clear (limpa a tela)
-cd (entra dentro de uma pasta, usado para entrar em um diretório desejado)
[ex: cd \c > cd \Users > cd \DELL > cd \OneDrive > cd \Documentos > cd \Estudos]

-mkdir "nome que quiser" (cria uma pasta no diretório selecionado com o cd)
touch "nome que quiser.tipo_do_arquivo"[ex: exemplo.txt] (cria um arquivo com o nome que colocar
e do tipo que colocar depois do .)

-Ou vá em uma pasta que queira vincular seus projetos com o git e clique com o botão direito e logo clique em git bash here
(ele ja seleciona aquele diretório para fazer alterações sem precisar usar os comandos cd, ls, touch e etc)

-git init (cria uma pasta git para trabalhar com os arquivos que tem ali, e execultar muitos outros comandos)
{não esqueça de selecionar o diretório com o git dash here ou manualmente}
-Para ver a pasta .git você precisa ir no menu da pasta selecionada clicar em exibir >
 Mostrar/Ocultar > Selecionar Itens Ocultos
-Dentro dessa pasta que todo o seu conteúdo será armazenado pelo git
-Na pasta Objects dentro do .git que ficará os commits que verá mais pra frente

-git status (diz se tem algum arquivo que precisa ser adicionado a pasta .git{repositório} ou não)
-quando estiver em vermelho é porque não foi adicionado ao repositório, quando estiver verde é porque foi,
mas quando está todas as etapas concluidas (adicionado ao repositório e criado um commit)
aparece nothing to commit, working tree clean
-git add "nome do arquivo.tipo do arquivo" (para adicionar um arquivo específico ao repositório)
-git add . ou git add * (adiciona todos os arquivos daquela pasta ao repositório)

-git commit -m "nome que quiser" (cria uma versão de armazenamento dos arquivos)
-git log (mostra as versões{commits} criados naquele .git e por quem com nome e email)
git log --oneline (mostra as versões{commits} do git com seu nome e seu código de versão,  uma maneira melhor)
-git add . (armazena os arquivos em um container) git commit -m "nome" (adiciona o container ao repositório .git)

-master é o ramo de commits principal, head é o commit que está selecionado
-git commit -am "comentário do commit" (eu ja adiciono o arquivo ao container 
e já crio uma commit para aquele container, tudo em uma linha só)

-git log --graph (cria um gráfico dos seus commits, facilita se localizar)
-git commit --amend -m "nova mensagem" (para renomear o ultimo commit selecionado) NESSEITA DE REVISÃO 
-além das versões{commits} criados, você pode criar ramos de commits para trabalhar separadamente
(master é o ramo principal, esses ramos são chamados de branchs ou no singular branch)
-git branch (mostras as branchs {ramos} que você possui)
-hash é o id de cada commit, cada commit tem seu id{hash}
-git checkout "hash" (para mudar de commits{versões})
(para ver o hash de cada commit basta escrever git log --oneline)
-quando você usar o checkout as versões posteriores a ela, ficarão anexadas na branch master,
já a versão selecionada e as versões anteriores serão desanexadas da branch master,
caso queira retornar as versões posteriores você precisará escrever: git checkout "master"
(no caso a branch master que sofrerá essas alterações porque é com ela que estamos trabalhando)

-git diff (mostra as alterações que você fez em seus arquivos, verde é o que escreveu, vermelho é oque apagou)
-git reset HEAD (caso você tenha atualizado ou adicionado um arquivo e colocado ele no container com o git add,
mas ainda não adicionou o container ao seu commit com git commit "nome", e se arrependeu de suas alterações você pode
digitar esse comando para desfazer as alteraçõeam s, mas depois terá que usar o git add mais uma vez)

-git reset --hard "hash" (para apagar seus commits e voltar até o hash selecionado, 
enquanto não chegar no commit desejado ele irá apagar os demais)

-git checkout -b "Nome" (Cria uma nova ramificação{branch}, já com todos os commits do ramo que estava sendo utilizado)
-git merge "nome" para fundir as branchs, primeiro vc tem que estar na branch master, depois escrever
o código com o nome da branch que você quer fundir)
-Se o código for o mesmo um deles continua, não duplica, se um linha estiver diferente da outra aparecerá conflit no git,
para resolver você entra no programa que está usando e aparecerá a opção de manter uma linha e excluir a outra, vice-versa,
maanter as duas linhas ou fazer uma comparação automática 
-depois de resolver os conflitos você tem que fazer um novo add e commit, então ele fará o merge automaticamente no novo commit
-git merge --abort (abortar o marge quando houver um conflito)





